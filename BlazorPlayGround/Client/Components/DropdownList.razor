<div class="form-group" style="position:relative;">
    <input type="button" style="text-align:inherit;" class="form-control" @onclick="ToggleDropdown" @oninput="Filter" @bind-value="SelectedDropdown.Value"/>

    @if (!string.IsNullOrWhiteSpace(SelectedDropdown.Value))
    {
        <span class="clear-input-icon text-danger" @onclick="ClearInput">&#10006;</span>
        <span class="divider"></span>
    }

    <span class="dropdown-arrow" @onclick="ToggleDropdown">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-caret-down-fill" viewBox="0 0 16 16" style="left: 6px;
    position: relative;">
            <path d="M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z" />
        </svg>
    </span>

    @if (InputClicked)
    {
        <div style="position:absolute; width:100%;max-height:200px;overflow: auto;text-align:inherit;" class="dropdown-menu show" @onclick:stopPropagation>
           
            @if(Searchable)
           {
                <span class="dropdown-item">
                    <input type="text" class="form-control"  @oninput="Filter" @bind-value=SearchText  />
                </span>
           }

            @foreach (var item in FilteredData)
            {
                <span class="dropdown-item" style="cursor:pointer;" @onclick="() => SelectItem(item)">@item.Value</span>
            }
        </div>
    }
</div>

<div @onclick="HideDropdownOnClickOutside" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; display: @(InputClicked ? "block" : "none")"></div>

@code {
    [Parameter]
    public bool Searchable { get; set; }
    [Parameter]
    public List<DropdownModel> Data { get; set; }=new ();
    [Parameter]
    public EventCallback<DropdownModel> OnChange { get; set; }
    public List<DropdownModel> FilteredData { get; set; } = new();
    public DropdownModel SelectedDropdown { get; set; } = new();
    private bool InputClicked { get; set; }
    public string? SearchText { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (Data == null)
        {
            Data = new();
        }
        FilteredData = Data;
    }

    void ToggleDropdown()
    {
        InputClicked = !InputClicked;

        if (string.IsNullOrWhiteSpace(SearchText))
        {
            FilteredData = Data;
        }
        else
        {
            FilteredData = Data
                .Where(x => x.Value.ToLower().Contains(SearchText.ToLower()))
                .Take(5)
                .ToList();
        }

        this.StateHasChanged();
    }

    void Filter(ChangeEventArgs e)
    {
        SearchText = e.Value?.ToString();
        FilteredData = Data
            .Where(x => x.Value.ToLower().Contains(SearchText.ToLower()))
            .Take(5)
            .ToList();
        InputClicked = true;
        this.StateHasChanged();
    }

    void SelectItem(DropdownModel item)
    {
        SelectedDropdown.Value = item.Value;
        OnChange.InvokeAsync(item);
        InputClicked = false;
        this.StateHasChanged();
    }

    void HideDropdownOnClickOutside()
    {
        InputClicked = false;
        this.StateHasChanged();
    }

    void ClearInput()
    {
        SelectedDropdown = new();
        FilteredData = Data;
        OnChange.InvokeAsync(SelectedDropdown);
        InputClicked = true;
        this.StateHasChanged();
    }
}

